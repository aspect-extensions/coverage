"""
Implement a 'coverage' task that wraps a test command.

Gathers the coverage.dat files to power common developer workflows.
"""

# buildifier: disable=function-docstring
def impl(ctx) -> int:
    out = ctx.std.io.stdout
    err = ctx.std.io.stderr
    build = ctx.bazel.build(
        "//...",
        events = True,
        bazel_flags = [
            "--isatty=" + str(int(out.is_tty)),
            "--collect_code_coverage",
        ],
        bazel_verb = "test"
    );

    coverage_dat_files = []
    for event in build.events():
        if event.kind == "test_result":
            coverage_dat_files.extend([f.file.removeprefix("file://") for f in event.payload.test_action_output if f.file.endswith("coverage.dat")])
        # TODO: populate a GITHUB_OUTPUT variable so we can use https://github.com/codecov/codecov-action
        if event.kind == "progress":
            out.write(event.payload.stdout)
            err.write(event.payload.stderr)

        if event.kind == "build_finished_id":
            for file in coverage_dat_files:
                out.write(file + "\n")
                out.write(ctx.std.fs.read_to_string(file) + "\n")
            
    build.wait()
    # TODO: get the delta of changed files from VCS, and render 'incremental' coverage as the default presentation

    return 0

coverage = task(
    implementation = impl,
    args = {
        "targets": args.positional(),
    }
)
